@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Text

@inject IJSRuntime JS;

<PageTitle>Home</PageTitle>

<div>
    <h2 class="display-4">WebAssembly Upload</h2>
    <p>Read a file using Blazor WebAssembly.</p>
</div>

@if(Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}

<EditForm Model="@IfcFile" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText class="form-control mb-4" placeholder="Search string" @bind-Value="@IfcFile.CheckString" />
    <InputText class="form-control mb-4" placeholder="Check type" @bind-Value="@IfcFile.CheckType" />
    <InputFile class="form-control mb-4" OnChange="SetFile" accept=".ifc" />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

<script type="text/javascript">
	function saveAsFile(filename, bytesBase64) {
		var link = document.createElement('a');
		link.download = filename;
		link.href = "data:application/octet-stream;base64," + bytesBase64;
		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);
	}
</script>

@code {
    private WebAssemblyFile IfcFile { get; set; } = new();
    private long maxFileSize = 5120000;
    private string Message { get; set; } = String.Empty;
    private IfcFilter Filter = new IfcFilter(); 

    private void SetFile(InputFileChangeEventArgs e)
    {
        IfcFile.FileInput = e.File;
    }

    private async Task OnSubmit()
    {
        try
        {
            var checker = new NameChecker();
            checker.FilterType = NameFilterType.Equals;
            Filter.Checker = checker;
            Filter.SearchString = IfcFile.CheckString;

            int numberObjectsFiltered = 0;
            string filtered = String.Empty;
            System.IO.Stream fileStream = IfcFile.FileInput.OpenReadStream(maxFileSize);
            using var reader = new StreamReader(fileStream);
            string str = await reader.ReadToEndAsync();
			string[] ifcContent = str.Split('\n');
			numberObjectsFiltered = Filter.FilterIfcString(ifcContent, out string filteredIfcContent);
			if (!String.IsNullOrEmpty(filteredIfcContent))
			{
				filtered = filteredIfcContent;
			}

            if (numberObjectsFiltered > 0)
            {
                Message = $"{IfcFile.FileInput.Name} read successful, elements filtered: {numberObjectsFiltered}";

                string newFileName = $"{IfcFile.FileInput.Name.Replace(".ifc", "")}_updated.ifc";

                // Convert content to Base64 for download`
				var encodingISO_8859_1 = Encoding.GetEncoding("ISO-8859-1");
                var byteArray = encodingISO_8859_1.GetBytes(filtered);

                await JS.InvokeVoidAsync(
                            "saveAsFile",
                            newFileName,
                            Convert.ToBase64String(byteArray));
            }
            else
            {
                Message = $"{IfcFile.FileInput.Name} read successful, but zero elements were filtered successfully";
            }
        } 
        catch(Exception e)
        {
            Message = "Read failed. Error: " + e.Message;
        }
    }

    private class WebAssemblyFile
    {
        [Required]
        public string CheckString { get; set; } = String.Empty;
        [Required]
        public string CheckType { get; set; } = String.Empty;
        
        public IBrowserFile FileInput { get; set; }
    }
}
