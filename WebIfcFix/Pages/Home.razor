@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Text

@inject IJSRuntime JS;

<PageTitle>Home</PageTitle>

<div>
    <h2 class="display-4">WebAssembly Upload</h2>
    <p>Read a file using Blazor WebAssembly.</p>
</div>

@if(Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}

<EditForm Model="@Ticket" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText class="form-control mb-4" placeholder="Title" @bind-Value="@Ticket.Title" />
    <InputText class="form-control mb-4" placeholder="Description" @bind-Value="@Ticket.Description" />
    <InputFile class="form-control mb-4" OnChange="SetFile" accept=".ifc" />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

<script type="text/javascript">
	function saveAsFile(filename, bytesBase64) {
		var link = document.createElement('a');
		link.download = filename;
		link.href = "data:application/octet-stream;base64," + bytesBase64;
		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);
	}
</script>

@code {
    private WebAssemblyFile Ticket { get; set; } = new();
    private long maxFileSize = 5120000;
    private string Message { get; set; } = String.Empty;

    private void SetFile(InputFileChangeEventArgs e)
    {
        Ticket.FileInput = e.File;
    }

    private async Task OnSubmit()
    {
        try
        {
            System.IO.Stream fileStream = Ticket.FileInput.OpenReadStream(maxFileSize);
            using var reader = new StreamReader(fileStream);
            var content = await reader.ReadToEndAsync();
            Message = $"{Ticket.FileInput.Name} read successful! {content}";
            // Update content (replace with your desired logic)
            var updatedContent = content + "\n** This file has been updated!**";

            // Convert content to Base64 for download
            var byteArray = Encoding.UTF8.GetBytes(updatedContent);

			await JS.InvokeVoidAsync(
						"saveAsFile",
						"updated.ifc",
						Convert.ToBase64String(byteArray));

        } 
        catch(Exception e)
        {
            Message = "Read failed. Error: " + e.Message;
        }
    }

    private class WebAssemblyFile
    {
        [Required]
        public string Title { get; set; } = String.Empty;
        [Required]
        public string Description { get; set; } = String.Empty;
        
        public IBrowserFile FileInput { get; set; }
    }
}
