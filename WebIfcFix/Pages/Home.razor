@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using IfcFixLib.FilterStrategy
@using IfcFixLib.IfcPipelineDefinition
@using IfcFixLib

@inject IJSRuntime JS;

<PageTitle>Blazor WASM IFC processing</PageTitle>

<div class="container">

<div>
    <h2 class="display-4">Blazor WASM IFC processing</h2>
    <p>Read and filter IFC file using Blazor WebAssembly, after submit edited IFC should be downloading.</p>
</div>

<IfcInputParser Parser="Parser" />

@if(Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}
<EditForm Model="@IfcFile" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText class="form-control mb-4" placeholder="Name, or part of it, of the element to filter" @bind-Value="@IfcFile.CheckString" />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

<IfcOutputSerializer Serializer="Serializer" />

</div>

@code {
    private WebAssemblyFile IfcFile { get; set; } = new();
    private DbParser Parser { get; set; } = new();
    private DbSerializer Serializer { get; set; } = new();
    private PipelineManager Manager { get; set; }
    private string Message { get; set; } = String.Empty;

    private async Task OnSubmit()
    {
        try
        {
            var checker = new StringChecker();
            checker.FilterType = StringFilterType.Contains;
            var valueGetter = new StringValueGetter();
            valueGetter.ValueType = ElementStringValueType.Name;
            var strategy = new StringFilterStrategy();
            strategy.StringChecker = checker;
            strategy.FilteredString = IfcFile.CheckString;
            strategy.StringValueGetter = valueGetter;
            ElementsFilter filter = new ElementsFilter(strategy);
			Manager = new PipelineManager(Parser);
            Manager.AddToPipeline(filter);

            await Manager.ContinueProcessingAsync();
            int numberObjectsFiltered = filter.Output!.Elements.Count;
            string filtered = String.Empty;

            if (numberObjectsFiltered > 0)
            {
                var dublicator = new DbDuplicator();
                Manager.AddToPipeline(dublicator);
                Manager.PipeEnd.PipeInto(Serializer);
                await Manager.ContinueProcessingAsync();

                Message = $"Read successful, elements filtered: {numberObjectsFiltered}";
            }
            else
            {
                Message = $"Read successful, but zero elements were filtered out";
            }
        } 
        catch(Exception e)
        {
            Message = "Read failed. Error: " + e.Message;
        }
    }

    private class WebAssemblyFile
    {
        [Required]
        public string CheckString { get; set; } = String.Empty;
    }
}
