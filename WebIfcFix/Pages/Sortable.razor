@page "/sortable"
@using System.Linq

<h3 class="text-center">Sortable list tryout</h3>
<h5 class="text-center">Target id: @targetId</h5>
<div class="container">
	<div class="row">

		<div class="col-6">
			<p class="alert alert-info">Items1 start</p>
			<SortableList
				Id="pipeline"
				Items="Items1"
				Group="g1"
				OnUpdate=SortListOne
				OnRemove=ListOneRemove
				DoCallbackOnMoveToId="true"
				OnMoveToId=OnMoveToId
				Context="item">
				<SortableItemTemplate>
					<p class="alert alert-info">@item.Name</p>
				</SortableItemTemplate>
			</SortableList>
			<p class="alert alert-info">Items1 end</p>
		</div>
		<div
			style="height: 50vh; overflow-y: auto"
			class="col-6 position-relative">
			<GarbageBinSVG Fill="white" Class="@svgClass"/>
			<SortableList
				Id="@componentsId"
				Class="@componentClass"
				Items="Items2"
				Group="g1"
				Pull="clone"
				Sort="false"
				OnRemove=ListTwoClone
				Context="item">
				<SortableItemTemplate>
					<p class="alert alert-info @opacity">@item.Name</p>
				</SortableItemTemplate>
			</SortableList>
		</div>

	</div>
</div>

<style>
.background-svg {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  max-width: 100%;
  max-height: 100%;
  width: auto;
  height: auto;
}
</style>

@code {
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Items1 = Enumerable.Range(1, 10)
			.Select(x => new Item(x))
			.ToList();
		Items2 = Enumerable.Range(1, 10)
			.Select(x => new ItemPrototype(x))
			.ToList();
	}

	public List<Item> Items1 { get; set; }
	public List<ItemPrototype> Items2 { get; set; }
	private string componentClass => componentsHover ? "bg-success" : ".bg-transparent";
	private string opacity => componentsHover ? "opacity-0" : "opacity-100";
	private string opacityIcon => componentsHover ? "opacity-100" : "opacity-0";
	private string svgClass => $"background-svg {opacityIcon}";
	private bool componentsHover { get; set; }
	private string componentsId { get; } = "componentsCollection";
	private string targetId { get; set; } = string.Empty;

	public class Item(int id)
	{
		public int Id { get; set; } = id;
		public string Name => $"Filter {Id}";
	}
	public class ItemPrototype(int id)
	{
		public int Id { get; set; } = id;
		public string Name => $"Component {Id}";
		public Item GetClone()
		{
			return new Item(Id);
		}
	}

	private void OnMoveToId(string id)
	{
		targetId = id;
		if (!componentsHover)
		{
			componentsHover = id == componentsId;
			StateHasChanged();
		}
		else
		{
			if (id != componentsId)
			{
				componentsHover = false;
				StateHasChanged();
			}
		}
	}

	private void ListOneRemove((int oldIndex, int newIndex) indices)
	{
		var item = Items1[indices.oldIndex];
		Items1.Remove(item);
		componentsHover = false;
	}

	private void ListTwoClone((int oldIndex, int newIndex) indices)
	{
		var prototype = Items2[indices.oldIndex];
		Items1.Insert(indices.newIndex, prototype.GetClone());
	}

	private void SortListOne((int oldIndex, int newIndex) indices)
	{
		SortList(indices, Items1);
	}

	private void SortList((int oldIndex, int newIndex) indices, List<Item> items)
	{
		var (oldIndex, newIndex) = indices;

		var itemToMove = items[oldIndex];
		items.RemoveAt(oldIndex);

		if (newIndex < items.Count)
		{
			items.Insert(newIndex, itemToMove);
		}
		else
		{
			items.Add(itemToMove);
		}

		StateHasChanged();
	}
}
