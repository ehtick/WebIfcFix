@page "/sortable"
@using System.Linq
@using BlazorSortableList

<h3 class="text-center">Sortable list tryout</h3>
<div class="container">
	<div class="row">

		<div class="col-6">
			<p class="alert alert-info">Items1 start</p>
			<SortableList Items="Items1" Group="g1" OnUpdate="@SortListOne" OnRemove="@ListOneRemove" Context="item">
				<SortableItemTemplate>
					<p class="alert alert-info">@item.Name</p>
				</SortableItemTemplate>
			</SortableList>
			<p class="alert alert-info">Items1 end</p>
		</div>
		<div class="col-6">
			<SortableList Items="Items2" Group="g1" Pull="clone" Sort="false" OnRemove="@ListTwoClone" Context="item">
				<SortableItemTemplate>
					<p class="alert alert-info">@item.Name</p>
				</SortableItemTemplate>
			</SortableList>
		</div>

	</div>
</div>
@code {
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Items1 = Enumerable.Range(1, 10)
			.Select(x => new Item(x))
			.ToList();
		Items2 = Enumerable.Range(1, 10)
			.Select(x => new ItemPrototype(x))
			.ToList();
	}

	public List<Item> Items1 { get; set; }
	public List<ItemPrototype> Items2 { get; set; }
	public class Item(int id)
	{
		public int Id { get; set; } = id;
		public string Name => $"Filter {Id}";
	}
	public class ItemPrototype(int id)
	{
		public int Id { get; set; } = id;
		public string Name => $"Component {Id}";
		public Item GetClone()
		{
			return new Item(Id);
		}
	}
	private void ListOneRemove((int oldIndex, int newIndex) indices)
	{
		var item = Items1[indices.oldIndex];
		Items1.Remove(item);
	}

	private void ListTwoClone((int oldIndex, int newIndex) indices)
	{
		var prototype = Items2[indices.oldIndex];
		Items1.Insert(indices.newIndex, prototype.GetClone());
	}

	private void SortListOne((int oldIndex, int newIndex) indices)
	{
		SortList(indices, Items1);
	}

	private void SortList((int oldIndex, int newIndex) indices, List<Item> items)
	{
		var (oldIndex, newIndex) = indices;

		var itemToMove = items[oldIndex];
		items.RemoveAt(oldIndex);

		if (newIndex < items.Count)
		{
			items.Insert(newIndex, itemToMove);
		}
		else
		{
			items.Add(itemToMove);
		}

		StateHasChanged();
	}
}
