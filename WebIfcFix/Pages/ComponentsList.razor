@page "/components"
@inject IComponentsTypesService TypesService
@inject LayoutManagerService LayoutManager
@using System.Net
@using Newtonsoft.Json

<h3>ComponentsList</h3>
<div class="container no-select">
	<div class="row">
		<div class="col">
			<IfcInputParser Parser="LayoutManager.DbParser" />
			<SortableList
				Group="IfcFilters"
				Items="LayoutManager.ComponentsLayout"
				Handle=".handle"
				OnUpdate="SortList"
				OnRemove="RemoveComponent"
				Context="model">
				<SortableItemTemplate>
					<div class="card m-1">
						<div class="row g-0">
							<div class="col-1 handle" style="cursor: move">
								<PipeConnectorStatusIndicator Connector="@model.PipelineNode!.Value" />
							</div>
							<div class="col p-1">
								<DynamicComponent Type=@Type.GetType(model.ComponentTypeName!) Parameters="@model.Params()"/>
							</div>
						</div>
					</div>
				</SortableItemTemplate>
			</SortableList>
			<IfcOutputSerializer Serializer="LayoutManager.DbSerializer" />
		</div>
		<div class="col-3">
			<SortableList
				Group="IfcFilters"
				Items="TypesService.ComponentsTypes"
				Sort="false"
				Pull="clone"
				OnRemove="CreateNewComponent"
				Context="type">
				<SortableItemTemplate>
					<div class="alert alert-info">
						@type.FilterName
					</div>
				</SortableItemTemplate>
			</SortableList>
		</div>
	</div>
</div>

<LayoutPersistance OnLayoutUpdate="UpdateState" />

@code {
	private void SortList((int oldIndex, int newIndex) indices)
	{
		LayoutManager.ReorderLayout(indices.oldIndex, indices.newIndex);
		UpdateState();
	}

	private void CreateNewComponent((int oldIndex, int newIndex) indices)
	{
		LayoutManager.InsertNew(indices);
		UpdateState();
	}

	private void RemoveComponent((int oldIndex, int newIndex) indices)
	{
		LayoutManager.RemoveElementAt(indices.oldIndex);
		UpdateState();
	}

	private void UpdateState()
	{
		StateHasChanged();
	}
}
