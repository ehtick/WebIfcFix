@page "/components"
@inject NavigationManager NavManager
@using System.Net;
@using Newtonsoft.Json;

<h3>ComponentsList</h3>
<div class="container">
	<SortableList
		Items="Components"
		Handle=".handle"
		OnUpdate=SortList
		Context="model">
		<SortableItemTemplate>
			<div class="row">
				<div class="col-1 handle text-center fs-1" style="cursor: move">&#9776;</div>
				<div class="col">
					<DynamicComponent Type=@Type.GetType(model.ComponentTypeNane!) Parameters="@model.Params()"/>
				</div>
			</div>
		</SortableItemTemplate>
	</SortableList>
</div>

<button
	class="btn btn-primary"
	onclick="@SerializeList"
	type="button">
	Serialize current components list;
</button>

<pre>
	<code>
		@if (!string.IsNullOrEmpty(ListSerialized)) @ListSerialized
	</code>
</pre>

<p>
	Encoded length: @if (!string.IsNullOrEmpty(ListEncoded)) @ListEncoded.Length
</p>

@code {
	public List<ChildComponentModelBase>? Components { get; set; } =
		[
			new ChildComponent1Model(),
			new ChildComponent2Model(),
			new ChildComponent1Model(),
			new ChildComponent2Model()
		];
	public string ListSerialized { get; set; } = String.Empty;

	[SupplyParameterFromQuery(Name = "list")]
	public string ListEncoded { get; set; } = String.Empty;

	public void SerializeList()
	{
		ListSerialized = JsonConvert.SerializeObject(Components, Formatting.Indented);
		ListEncoded = WebUtility.UrlEncode(ListSerialized);
		StateHasChanged();
		NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("list", ListEncoded));
	}

	private void SortList((int oldIndex, int newIndex) indices)
	{
		var (oldIndex, newIndex) = indices;

		var itemToMove = Components![oldIndex];
		Components.RemoveAt(oldIndex);

		if (newIndex < Components.Count)
		{
			Components.Insert(newIndex, itemToMove);
		}
		else
		{
			Components.Add(itemToMove);
		}

		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		if (!String.IsNullOrEmpty(ListEncoded))
		{
			ListSerialized = WebUtility.UrlDecode(ListEncoded);
			var settings = new JsonSerializerSettings
			{
				Converters = { new ChildComponentModelConverter() }
			};
			var list = JsonConvert.DeserializeObject<List<ChildComponentModelBase>>(ListSerialized, settings);
			if (list is not null)
			{
				Components = list;
			}
			StateHasChanged();
		}
	}
}
