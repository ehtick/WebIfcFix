@using System.Net

@inject NavigationManager NavManager
@inject IJsonConvertService Json
@inject ILocalStorageService ClientStorage
@inject LayoutManagerService LayoutManager
@inject IJSRuntime JS

<div class="row mt-5">
	<button
		class="btn btn-primary"
		onclick="@SerializeAndShareLayout"
		type="button">
		Share layout
	</button>

	<pre>
		<code>
			@if (!string.IsNullOrEmpty(ListSerialized)) @ListSerialized
		</code>
	</pre>

	<p>
		Encoded length: @if (!string.IsNullOrEmpty(ListEncoded)) @ListEncoded.Length
	</p>

	<InputText class="form-control" @bind-Value="@NameToSave"/>
	<button
		class="btn btn-primary"
		onclick="@SaveLayout"
		type="button">
		Save layout
	</button>

	@if (SavedLayouts is not null && SavedLayouts.Count > 0)
	{
		<InputSelect class="form-select" @bind-Value="LayoutToLoad">
			@foreach (string savedLayout in SavedLayouts!)
			{
				<option value="@savedLayout">@savedLayout</option>
			}
		</InputSelect>
		<button
			class="btn btn-primary"
			onclick="@LoadLayout"
			type="button">
			Load layout
		</button>
	}
</div>

@code {
	[Parameter]
	[EditorRequired]
	public EventCallback OnLayoutUpdate { get; set; }

	public List<SerializableModelBase>? Components { get; set; } =
		[
			new FilterByStringComponentModel(),
		new IfcDataDublicatorModel()
		];
	public string ListSerialized { get; set; } = String.Empty;

	[SupplyParameterFromQuery(Name = "list")]
	public string ListEncoded { get; set; } = String.Empty;

	public string NameToSave { get; set; } = String.Empty;
	public string LayoutToLoad { get; set; } = String.Empty;
	public List<string>? SavedLayouts { get; set; }

	public async Task SaveLayout()
	{
		SavedLayouts!.Add(NameToSave);
		await ClientStorage.SetItemAsync(nameof(SavedLayouts), SavedLayouts);
		await ClientStorage.SetItemAsync(NameToSave, LayoutManager.ComponentsLayout);
		StateHasChanged();
	}
	public async Task LoadLayout()
	{
		var layout = await ClientStorage.GetItemAsync<List<SerializableModelBase>>(LayoutToLoad);
		if (layout is not null)
		{
			LayoutManager.ImportLayout(layout);
		}
		await OnLayoutUpdate.InvokeAsync();
		StateHasChanged();
	}

	public async Task SerializeAndShareLayout()
	{
		ListSerialized = Json.SerializeObject(LayoutManager.ComponentsLayout);
		ListEncoded = WebUtility.UrlEncode(ListSerialized);
		string url = NavManager.GetUriWithQueryParameter("list", ListEncoded);
		NavManager.NavigateTo(url);
        await JS.InvokeVoidAsync("copyTextToClipboard", url);
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (!String.IsNullOrEmpty(ListEncoded))
		{
			ListSerialized = WebUtility.UrlDecode(ListEncoded);
			var list = Json.DeserializeObject<List<SerializableModelBase>>(ListSerialized);
			if (list is not null)
			{
				Components = list;
			}
		}
		LayoutManager.ImportLayout(Components!);
		SavedLayouts = await ClientStorage.GetItemAsync<List<string>>(nameof(SavedLayouts)) ?? new List<string>();
		StateHasChanged();
		await OnLayoutUpdate.InvokeAsync();
	}
}
