@using System.Net

@inject NavigationManager NavManager
@inject IJsonConvertService Json
@inject ILocalStorageService ClientStorage
@inject ISanitizerService Sanitizer
@inject LayoutManagerService LayoutManager
@inject IJSRuntime JS

<div class="row m-5">
	<div class="d-grid gap-2 d-md-block">
		<button
			class="btn btn-primary"
			@onclick="@SerializeAndShareLayout"
			type="button">
			Share layout
		</button>
		<button
			class="btn @_showSaveOptionsBtnClass"
			@onclick="@ToggleShowSaveOptions"
			type="button">
			Save layout
		</button>
		<button
			class="btn @_showLoadOptionsBtnClass"
			@onclick="@ToggleShowLoadOptions"
			type="button">
			Load layout
		</button>
	</div>
</div>

@if (!string.IsNullOrEmpty(_layoutSerialized))
{
	<div class="row m-5">
		<div class="card p-0">
			<div class="card-body">
				<h5 class="card-title">
					Serialized layout
				</h5>
				<pre>
					<code>
						@_layoutSerialized
					</code>
				</pre>
			</div>
			<div class="card-footer">
				Encoded length: @LayoutEncoded.Length
			</div>
		</div>
	</div>
}

@if (_showSaveOptions)
{
	<div class="input-group m-5">
		<InputText
			class="form-control"
			placeholder="Name for saving layout locally"
			aria-label="Name for saving layout locally"
			aria-describedby="saveLayoutBtn"
			@bind-Value="@_nameToSave"/>
		<button
			class="btn btn-primary"
			@onclick="@SaveLayout"
			id="saveLayoutBtn"
			type="button">
			Save
		</button>
	</div>
}

@if (_showLoadOptions && _savedLayouts is not null && _savedLayouts.Count > 0)
{
	<div class="input-group m-5">
		<InputSelect
			class="form-select"
			aria-label="Options to load saved layouts"
			aria-describedby="loadLayoutBtn"
			@bind-Value="_layoutToLoad">
			@foreach (string savedLayout in _savedLayouts!)
			{
				<option value="@savedLayout">@savedLayout</option>
			}
		</InputSelect>
		<button
			class="btn btn-primary"
			@onclick="@LoadLayout"
			id="loadLayoutBtn"
			type="button">
			Load layout
		</button>
	</div>
}

@code {
	[Parameter]
	[EditorRequired]
	public EventCallback OnLayoutUpdate { get; set; }

	[SupplyParameterFromQuery(Name = nameof(this.layout))]
	public string LayoutEncoded { get; set; } = String.Empty;

	private List<SerializableModelBase>? layout { get; set; } =
		[
			new FilterByStringComponentModel(),
			new IfcDataDublicatorModel()
		];

	private string _layoutSerialized = String.Empty;
	private string _nameToSave = String.Empty;
	private string _layoutToLoad = String.Empty;
	private List<string>? _savedLayouts;
	private bool _showLoadOptions = false;
	private string _showLoadOptionsBtnClass => _showLoadOptions? "btn-outline-primary" : "btn-primary";
	private bool _showSaveOptions = false;
	private string _showSaveOptionsBtnClass => _showSaveOptions? "btn-outline-primary" : "btn-primary";

	public async Task SaveLayout()
	{
		_savedLayouts!.Add(_nameToSave);
		await ClientStorage.SetItemAsync(nameof(_savedLayouts), _savedLayouts);
		await ClientStorage.SetItemAsync(_nameToSave, LayoutManager.ComponentsLayout);
		StateHasChanged();
	}
	public async Task LoadLayout()
	{
		var layout = await ClientStorage.GetItemAsync<List<SerializableModelBase>>(_layoutToLoad);
		if (layout is not null)
		{
			LayoutManager.ImportLayout(layout);
		}
		await OnLayoutUpdate.InvokeAsync();
		StateHasChanged();
	}

	public async Task SerializeAndShareLayout()
	{
		_layoutSerialized = Json.SerializeObject(LayoutManager.ComponentsLayout);
		LayoutEncoded = WebUtility.UrlEncode(_layoutSerialized);
		string url = NavManager.GetUriWithQueryParameter(nameof(this.layout), LayoutEncoded);
		NavManager.NavigateTo(url);
		await JS.InvokeVoidAsync("copyTextToClipboard", url);
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (!String.IsNullOrEmpty(LayoutEncoded))
		{
			string json = WebUtility.UrlDecode(LayoutEncoded);
			_layoutSerialized = Sanitizer.SanitizeJson(json);
			var list = Json.DeserializeObject<List<SerializableModelBase>>(_layoutSerialized);
			if (list is not null)
			{
				layout = list;
			}
		}
		LayoutManager.ImportLayout(layout!);
		_savedLayouts = await ClientStorage.GetItemAsync<List<string>>(nameof(_savedLayouts)) ?? new List<string>();
		StateHasChanged();
		await OnLayoutUpdate.InvokeAsync();
	}

	private void ToggleShowLoadOptions() => _showLoadOptions = !_showLoadOptions;

	private void ToggleShowSaveOptions() => _showSaveOptions = !_showSaveOptions;
}
